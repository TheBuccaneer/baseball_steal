############################03 03 03 03 03 03############################################
claude.ai

## Methodische Annahmen: Team-Level Pop Time Aggregation (Script 03)

### Berechnetes Konstrukt
**Team-Season Pop Time** (2018‚Äì2025): Durchschnittliche Zeit (Sekunden) von Fanghandschuh-Kontakt bis Ball-Ankunft an Base (2B/3B), aggregiert auf Team-Ebene pro Saison.

---

### Methodische Entscheidungen

**1. Gewichtung: Attempts-weighted average**
- **Annahme**: Catcher mit mehr Steal-Attempts liefern zuverl√§ssigere Pop-Time-Sch√§tzungen als solche mit wenigen Messungen.
- **Umsetzung**: Pop Time wird mit `pop_2b_sba_count` (Anzahl der gemessenen Steal-Attempts nach 2B) gewichtet.
- **Begr√ºndung**: Vermeidet Verzerrung durch Backup-Catcher mit 2‚Äì3 Messungen, die unverh√§ltnism√§√üig starken Einfluss h√§tten bei einfachem Durchschnitt.

**2. Team-Zuordnung: "Current team" bei Trades**
- **Annahme**: Savant Pop-Time-Leaderboards weisen Catcher dem Team zu, f√ºr das sie **zuletzt** in der Saison spielten.
- **Limitation**: Bei Mid-Season-Trades werden alle Attempts des Catchers diesem einen Team zugeschlagen, auch wenn Attempts vor dem Trade f√ºr ein anderes Team entstanden.
- **Implikation**: Team-Pop-Time kann bei Trades leicht verzerrt sein. Script kennzeichnet Multi-Team-Catcher mit Warning.

**3. Dispersion: Weighted Standard Deviation**
- **Annahme**: Within-Team-Varianz der Pop Time (√ºber mehrere Catcher) ist relevant f√ºr Unsicherheitsquantifizierung.
- **Umsetzung**: `pop_time_2b_std` = attempts-gewichtete Standardabweichung der individuellen Catcher-Pop-Times innerhalb eines Teams.
- **Verwendung**: Erm√∂glicht sp√§tere Precision-Weighting (z. B. inverse-variance weighting) in Runner-Panel-Konstruktion.

**4. Reliability-Flag: <10 Attempts**
- **Annahme**: Team-Seasons mit <10 gemessenen Steal-Attempts nach 2B liefern unzuverl√§ssige Pop-Time-Sch√§tzungen.
- **Umsetzung**: `low_reliability = 1` wenn `total_attempts_2b < 10`.
- **Empfehlung**: Diese Beobachtungen in Sensitivit√§tsanalysen ausschlie√üen oder downgewichten.

**5. Missing 3B Pop Time: Separate Behandlung**
- **Annahme**: Nicht alle Teams haben ausreichend 3B-Steal-Attempts f√ºr robuste 3B-Pop-Time-Sch√§tzung.
- **Umsetzung**: `pop_time_3b_avg` wird separat berechnet; bei fehlenden Daten = `NaN`.
- **Verwendung im Projekt**: Hauptanalyse fokussiert auf 2B (h√∂here Attempt-Frequenz); 3B als Robustness-Check.

---

### Datenquellen-Annahmen

**Statcast Pop Time Definition** (nach MLB/Baseball Savant):
- Gemessen via Hawk-Eye-Tracking ab 2018
- Start: Ball trifft Fanghandschuh des Catchers
- Ende: Ball erreicht Handschuh des Fielders an Base
- **Nicht enthalten**: Pitcher-Delivery-Zeit, Runner-Reaktionszeit

**Team-ID-Stabilit√§t**:
- `team_id` in Savant-Daten ist konsistent √ºber Jahre (z. B. 147 = New York Yankees)
- Bei Franchise-Umz√ºgen: neue `team_id` (nicht relevant 2018‚Äì2025)

---

### Qualit√§tschecks (im Script)

1. **30-Teams-Assert**: Warnung wenn Season ‚â† 30 Teams (z. B. fehlende Daten)
2. **Multi-Team-Catcher**: Count + Warning bei Trades
3. **Low-Attempts-Flag**: Kennzeichnung unreliable estimates
4. **Plausibilit√§ts-Range**: Pop Time sollte ~1.85‚Äì2.10 sec sein (wird in Summary ausgegeben)

---

### Verwendung in weiterer Analyse

Diese Team-Pop-Time-Daten dienen als **Opponent-Merkmal** im Runner-Panel:
- F√ºr jeden Runner √ó Season wird schedule-gewichtete `opponent_avg_poptime` berechnet
- Gewichtung nach Anzahl Spiele gegen jedes Gegner-Team
- Annahme: Runner steht h√§ufigeren Gegnern √∂fter gegen√ºber ‚Üí h√∂heres Gewicht bei Opposition-Metrik


CHAT GPT

Alles klar‚Äîhier sind die **Annahmen/Methodik-Notizen f√ºr Script 03 (Team Pop Time 2018‚Äì2025)**, so dass du sie 1:1 ins Paper √ºbernehmen kannst.

# Annahmen & Definitionen

* **Datenquelle & Scope**
  Wir verwenden die Baseball-Savant **Catcher Pop Time** CSVs je Saison (2018‚Äì2025), Regular Season. Pop Time ist nach Statcast definiert als die Zeit vom Eintreffen des Pitches im Catcher-Mitt bis zu dem Zeitpunkt, an dem der Wurf am **zentralen Punkt** der anvisierten Base ankommt bzw. dorthin projiziert wird. Damit kombiniert Pop Time **Exchange/Footwork** und **Arm Strength**; sie wird pro **Steal-/Pickoff-Wurf** gemessen. ([MLB.com][1])

* **Einheit der Messung**
  Pop Time wird **pro Wurf/Versuch** erfasst (nicht pro Spiel). Baseball Savant berichtet deshalb je Catcher **Durchschnittswerte** sowie **Anzahl der Versuche (‚ÄûAtt.‚Äú/SBA)** nach Base (2B/3B). ([baseballsavant.com][2])

* **Team-Aggregation (Zielgr√∂√üe)**
  F√ºr jedes **Team√óSeason** bilden wir eine **Versuche-gewichtete Durchschnitts-Pop-Time**:
  [
  \text{TeamPop2B}*{t}=\frac{\sum*{c\in t}(\text{Att2B}*{c}\cdot \overline{\text{Pop2B}}*{c})}{\sum_{c\in t}\text{Att2B}_{c}}
  ]
  analog f√ºr **3B**, sofern vorhanden. So spiegelt der Teamwert die **in-game** Belastung (Anzahl geworfener Steal-/Pickoff-W√ºrfe) wider, statt alle Catcher gleich zu gewichten. ([baseballsavant.com][3])

* **Welche Versuche z√§hlen (Gewichte)**
  Als Gewichte nutzen wir die von Savant ausgewiesenen **Steal-Versuche zur jeweiligen Base** (SBA/‚ÄûAtt.‚Äú). Diese ‚ÄûAttempts‚Äú enthalten **erfolgreiche Steals und Caught-Stealings** (Outcome-agnostisch), was konsistent mit der Savant-Berichterstattung ist. ([baseballsavant.com][2])

* **Qualifikationsgrenzen (nur zur Einordnung, nicht als Filter)**
  Savant verlangt f√ºr die **2B-Leaderboards** grob ‚â•1 SBA je 10 Teamspiele und f√ºr **3B** ‚â•1 SBA je 50 Teamspiele. Unser Team-Aggregator **filtert NICHT** nach diesen Schwellen (um Selektionsbias zu vermeiden), sondern verwendet **alle verf√ºgbaren Versuche**; Teams mit sehr wenigen W√ºrfen werden unten gesondert markiert. ([baseballsavant.com][4])

* **Multi-Team-Catcher**
  Stehen Catcher-W√ºrfe **teamgesplittet** in den CSVs, gehen sie in jene Team-Saison ein, **f√ºr die sie erfolgt sind**. Falls einzelne Quellen Catcher-Saisons **nicht** teamgesplittet ausweisen, werden sie dem in den CSVs angegebenen Team zugeordnet (Konservativ-Annahme). *Praktische Folge:* Minimale Verzerrung m√∂glich, aber typischerweise klein.

* **Fehlende Daten / 3B-Knappheit**
  3B-W√ºrfe sind selten; wenn **Att3B = 0**, bleibt **TeamPop3B = NA**. F√ºr 2B erwarten wir breite Abdeckung. Das deckt sich mit der Praxis und den Savant-Qualifikatoren. ([baseballsavant.com][4])

* **Sanity-Checks & Plausibilit√§ten**
  (i) Pro Saison **30 Teamzeilen**; (ii) **TeamPop2B** typischerweise um ~**2,0 s** (Liga-Mittel), Range etwa 1,84‚Äì2,10 s; (iii) `total_attempts_2b` und `n_catchers` werden mit ausgegeben, um die **Stabilit√§t** des Mittelwerts einzuordnen. ([MLB.com][1])

# Was NICHT gemacht wird (bewusste Abgrenzung)

* **Keine Spiel-/Pitch-Level Korrekturen** (z. B. nach Pitch Tempo, Runner-Speed, Count, Inning, Score). Die Team-Pop-Time ist ein **exposure-gewichteter Saisonwert**, kein kausal adjustierter Effekt. (Savant-Definition misst einen Wurf-Zeitbedarf; Kontextvariablen bleiben au√üen vor.) ([MLB.com][1])

* **Kein ‚ÄûQuali-Only‚Äú-Filter**
  Wir nutzen **alle** verf√ºgbaren W√ºrfe statt nur qualifizierte Catcher/Teams‚Äîsonst droht systematischer Ausschluss schwach beobachteter Einheiten. Die Qualifier dienen **nur** zur Interpretation. ([baseballsavant.com][4])

* **Keine Monats-Pop-Times**
  Pop Time liegt in unseren Exporten auf **Season-Ebene** vor; eine saubere monatliche Zerlegung wird nicht berichtet. (Monats-Trends erzeugen wir nur f√ºr **SB/CS/Attempts**, nicht f√ºr Mechanismen.) ([baseballsavant.com][3])

# Output (zur Reproduzierbarkeit)

* **Spalten**: `season`, `team_id`, `pop_time_2b_avg`, `total_attempts_2b`, `pop_time_3b_avg` (falls vorhanden), `total_attempts_3b`, `n_catchers`.
* **Regeln**: Attempts-gewichtetes Mittel; fehlende 3B-Teams als `NA`; optionaler **Warn-Flag** bei `total_attempts_2b < 10`.

# Kurzbegr√ºndung der Gewichtung

Savant misst Pop Time **je Wurf** und berichtet **Durchschnitte** √ºber W√ºrfe. Das Aggregat **auf Team-Ebene** sollte daher **Wurf-/Versuchs-gewichtet** sein (ansonsten bek√§me ein Backup-Catcher mit 3 W√ºrfen dasselbe Gewicht wie ein Starter mit 70 W√ºrfen). Die Methode folgt der Metrik-Definition und der Art, wie Savant die Kennzahl ver√∂ffentlicht. ([MLB.com][1])

Wenn du m√∂chtest, packe ich diese Annahmen als knappen **‚ÄûMethods ‚Äî Team Pop Time‚Äú**-Kasten ins Manuskript (inkl. Literaturhinweis auf die MLB-Glossar-Definition und die Savant-Leaderboards).

[1]: https://www.mlb.com/glossary/statcast/pop-time?utm_source=chatgpt.com "Pop Time (POP) | Glossary"
[2]: https://baseballsavant.mlb.com/savant-player/ivan-herrera-671056?stats=statcast-r-catching-mlb&utm_source=chatgpt.com "Iv√°n Herrera Stats: Statcast, Visuals & Advanced Metrics"
[3]: https://baseballsavant.mlb.com/leaderboard/poptime?utm_source=chatgpt.com "Statcast Catcher Pop Time Leaderboard | baseballsavant.com"
[4]: https://baseballsavant.mlb.com/leaderboard/catcher-throwing?utm_source=chatgpt.com "Statcast Catcher Throwing Leaderboard | baseballsavant.com"


############################04 04 04 04 04 04############################################

claude.ai

Verstanden - bei Updates nur die ge√§nderten Teile! üëç

Hier die Dokumentation f√ºr Script 04:

---

## Methodische Annahmen: Team-Level Pitch Tempo Aggregation (Script 04)

### Berechnetes Konstrukt
**Team-Season Pitch Tempo** (2018‚Äì2025): Durchschnittliche Zeit (Sekunden) zwischen aufeinanderfolgenden Pitches, gemessen Release-to-Release, **mit Runnern on Base**. Aggregiert auf Team-Ebene als pitches-gewichteter Median-Durchschnitt.

---

### Methodische Entscheidungen

**1. Tempo-Metrik: "Runners On Base" priorisiert**
- **Annahme**: Pitcher-Tempo mit Runnern auf Base ist die relevante Exposure f√ºr Runner-Steal-Entscheidungen.
- **Umsetzung**: Script nutzt `median_seconds_onbase` aus Savant. Fallback auf `median_seconds_empty` oder Gesamt-Tempo falls nicht verf√ºgbar.
- **Begr√ºndung**: Tempo ohne Runner irrelevant f√ºr Steal-Situationen; Pitcher arbeiten langsamer mit Runnern (Pickoff-Moves, Slide-Steps).

**2. Gewichtung: Pitches-weighted average**
- **Annahme**: Pitcher mit mehr geworfenen Pitches liefern stabilere Tempo-Sch√§tzungen als Low-Inning-Reliever.
- **Umsetzung**: Team-Tempo = gewichteter Durchschnitt √ºber alle Pitcher, Gewichte = `total_pitches_onbase`.
- **Begr√ºndung**: Starter (3000+ Pitches/Season) dominieren Team-Tempo st√§rker als Reliever (200‚Äì500 Pitches), was intended ist.

**3. Team-Zuordnung bei Trades: "Current team"**
- **Annahme**: Savant-Tempo-Daten weisen Pitcher dem finalen Team der Saison zu (wie Pop Time).
- **Limitation**: Alle Pitches eines getradet Pitchers fallen auf ein Team, auch Pre-Trade-Pitches.
- **Check**: Script warnt bei Multi-Team-Pitchern; Anteil typisch 3‚Äì5% der Pitcher pro Season.

**4. Pitch Timer Rule Changes: Ligaweite Shifts**
- **2023 Rule**: 20-Sekunden-Timer mit Runnern eingef√ºhrt (15 sec ohne Runner); Violations = Automatic Ball. ([MLB.com](https://www.mlb.com/news/mlb-2023-rule-changes-pitch-timer-larger-bases-shifts))
- **2024+**: Strengere Durchsetzung; League-Infractions sanken (Gew√∂hnung).
- **Erwartung**: Tempo-Reduktion ~2‚Äì4 sec (Pre ‚Üí Post-2023).
- **Implikation**: `league_tempo_onbase_mean` zeigt Zeittrend; `tempo_diff` (Team ‚Äì Liga) kontrolliert f√ºr Regeleffekt.

**5. Dispersion & Reliability**
- **Weighted Std**: `tempo_onbase_std` = pitches-gewichtete Standardabweichung √ºber Pitcher-Pool eines Teams.
- **Low-reliability flag**: <1000 Pitches/Team-Season (ca. 1/3 normaler Load) ‚Üí unreliable estimate.
- **Begr√ºndung**: Teams mit wenigen Pitches = oft Expansion/Injury-geplagtes Jahr.

**6. Liga-Mittel & Team-Relative Metriken**
- **League Mean (je Season)**: Pitches-gewichtet, nur reliable teams (low_reliability=0).
- **Tempo Diff**: `tempo_diff = team_tempo - league_mean` ‚Üí kontrolliert f√ºr ligaweite Regeleffekte.
- **Verwendung**: In DiD/Modellen mit Year FE: `tempo_diff` isoliert team-spezifische Abweichungen vom Regeltrend.

---

### Datenquellen-Annahmen

**Statcast Pitch Tempo Definition** ([Baseball Savant](https://baseballsavant.mlb.com/leaderboard/pitch-tempo)):
- **Release-to-Release**: Zeit von Ball-Release (Pitch N) bis n√§chster Release (Pitch N+1).
- **Median-basiert**: Robuster gegen Outliers (Mound-Visits, Injuries, Delays).
- **Separate Tracks**: Mit/ohne Runner; Script nutzt "with runners".
- **Minimum-Threshold**: Pitcher brauchen ‚â•20 qualifizierende Pitches f√ºr validen Median.

**Tempo-Messung via Hawk-Eye** (Statcast):
- Pr√§zision: ¬±0.01 sec (Automated Tracking ab 2018).
- Exklusion: Intentional Delays (Trainer-Visits, Challenges) werden algorithmisch entfernt.

---

### Qualit√§tschecks (im Script)

1. **30-Teams-Check** pro Season + Warning bei Abweichung
2. **Multi-Team-Pitcher-Warning** (Mid-Season-Trades)
3. **Low-reliability flag** (<1000 pitches)
4. **Pitch-Clock-Effekt**: Automatischer Pre/Post-2023-Vergleich in Summary-Output
5. **Plausibilit√§ts-Range**: Tempo sollte 15‚Äì30 sec sein (Pre-Clock: 20‚Äì25 sec; Post-Clock: 18‚Äì22 sec)

---

### Verwendung in weiterer Analyse

Analog zu Pop Time:
- **Runner-Panel**: `opponent_avg_tempo` wird schedule-gewichtet aus diesen Team-Daten konstruiert.
- **Mechanismen-Pfad**: Tempo ‚Üí Lead Distance Gained ‚Üí Attempt ‚Üí Success
- **DiD-Spezifikation**: Year FE + `tempo_diff` isoliert team-spezifische Effekte vom 2023-Regelschock.



chatgpt


Ja, so ist‚Äôs stimmig. Hier ist der **Methods/Assumptions-Text f√ºrs Paper** zu **Script 04 ‚Äì Team Pitch Tempo (2018‚Äì2025)**, abgestimmt auf deine CSVs (`team_tempo_2018_2025.csv`).

# Methods ‚Äî Team Pitch Tempo (2018‚Äì2025)

**Datenquelle & Metrik.** Wir verwenden Baseball-Savant *Pitch Tempo* auf Spieler-Ebene als Grundgr√∂√üe. *Pitch Tempo* ist **die Median-Zeit zwischen zwei Pitches (Release-zu-Release)**; ber√ºcksichtigt werden Pitches, die auf einen *Take* (Called Ball/Strike) folgen und dem **gleichen Batter** geworfen werden. Savant berichtet Tempo getrennt f√ºr **Bases Empty** und **Runners On**; Team-Ansichten sind verf√ºgbar. ([MLB.com][1])

**Kontextwahl.** F√ºr Basestealing-Analysen aggregieren wir ausschlie√ülich den **‚ÄûRunners On‚Äú-Kontext** (Tempo *mit* Runnern auf Base). Das entspricht dem Spielszenario, in dem Leads, Pop-Time und Steal-Entscheidungen relevant sind. ([MLB.com][1])

**Zeitraum & Scope.** Saisons **2018‚Äì2025**, Regular Season. Postseason ist nicht enthalten (Savant-Leaderboards sind saisonal; wir nutzen die regul√§ren Season-Exports). ([baseballsavant.com][2])

**Aggregation auf Team-Ebene.**
Ausgehend von pitcher-spezifischen *Median Seconds (Runners On)* bilden wir je **Team√óSeason** ein **Pitch-gewichtetetes Mittel**:

[
\text{TeamTempo}*{t,s}
=\frac{\sum*{p\in(t,s)} w_{p,s}\cdot \widetilde{T}*{p,s}^{(\text{on base})}}
{\sum*{p\in(t,s)} w_{p,s}}
]

mit ( \widetilde{T}*{p,s}^{(\text{on base})} ) = Pitcher-Median (Runners On) und ( w*{p,s} ) = **Anzahl Pitches (Runners On)** dieses Pitchers. Zus√§tzlich berichten wir eine **pitches-gewichtete Standardabweichung** als Streuungsma√ü und die Anzahl aggregierter Pitcher pro Team/Season. Diese Pitches-Gewichtung spiegelt die Mess-Einheit der Metrik wider (Tempo ist pitch-basiert), statt Pitcher gleich zu gewichten. ([MLB.com][1])

**Datenbereinigung / Fallbacks.**

* Reihen ohne valide *on-base*-Tempo-Werte oder mit **0 Pitches** im on-base-Kontext werden nicht zur Aggregation herangezogen und als **low_reliability** markiert (Flag in der Datei).
* In unserer finalen Stichprobe 2018‚Äì2025 ist der Anteil `low_reliability = 0`. *(Dokumentationszweck; keine Korrekturen erforderlich.)*
  *(Hinweis: Savant aktualisiert Leaderboards regelm√§√üig; wir arbeiten mit den saisonalen Exporten, nicht mit Rolling Windows.)* ([baseballsavant.com][2])

**Interpretation & Regeln.**
Das *Pitch Tempo* ist eine **Beobachtungsgr√∂√üe** (kein kausal adjustierter Effekt). Ligaweite Verschiebungen rund um den **Pitch-Timer** (Einf√ºhrung 2023: **20 s** mit Runnern; Anpassung 2024: **18 s** mit Runnern) beeinflussen Niveaus/Verteilungen, **√§ndern aber nicht die Definition** der Metrik. In Modellen empfehlen wir **Year Fixed Effects** bzw. eine saisonrelative Normierung (Teamtempo minus Liga-Mittel desselben Jahres). ([MLB.com][3])

**Was wir nicht tun.**

* Keine Adjustments nach Count, Inning, Leverage, Batter/Pitcher-Hand, etc. (diese Kontexte sind in den Savant-Team/Pitcher-Aggregaten nicht standardisiert verf√ºgbar).
* Kein Versuch, aus Pitcher-Medianen den exakten Team-Median √ºber die **Gesamtpitch-Verteilung** zu rekonstruieren; das **pitch-gewichtete Mittel der Pitcher-Mediane** ist eine g√§ngige und transparente N√§herung auf Team-Ebene, kompatibel mit Savants Team-Leaderboards. ([baseballsavant.com][4])

**Einheiten & Spalten (Output).**
Sekunden. Datei enth√§lt mindestens:
`team_id, season, tempo_onbase_avg, tempo_onbase_std, total_pitches, n_pitchers, low_reliability`.

---

Wenn du m√∂chtest, formatiere ich dir das als kurzen **‚ÄûMethods ‚Äî Team Pitch Tempo‚Äú**-Kasten (LaTeX/Markdown) und erg√§nze optional eine Hilfstabelle mit **Liga-Durchschnitt je Jahr** (attempts/pitches-gewichtet), damit du Trends oder `team ‚àí league` unmittelbar im Panel joinen kannst.

[1]: https://www.mlb.com/glossary/statcast/pitch-tempo?utm_source=chatgpt.com "Pitch Tempo | Glossary"
[2]: https://baseballsavant.mlb.com/leaderboard/pitch-tempo?utm_source=chatgpt.com "Statcast Pitch Tempo | baseballsavant.com - MLB.com"
[3]: https://www.mlb.com/glossary/rules/pitch-timer?utm_source=chatgpt.com "Pitch Timer (2023 rule change) | Glossary"
[4]: https://baseballsavant.mlb.com/leaderboard/pitch-tempo?n=1&season_end=2022&season_start=2022&split=no&team=&type=Pitching+Team&with_team_only=1&utm_source=chatgpt.com "Statcast Pitch Tempo | baseballsavant.com - MLB.com"

###########05 05 05 ######################################################

chatgpt
Kurz: **Ja‚ÄîDatei & Script sind plausibel.** Die Gegner-Ableitung √ºber `half_inning` (Top = Ausw√§rtsteam schl√§gt, Bottom = Heimteam) ist regelkonform; damit ist **Opponent = jeweils das andere Team**. ([MLB.com][1])
Ab **2023** gilt die **balanced schedule** (jedes Team spielt gegen alle **29** Gegner) ‚Äî eure Maximalwerte ‚Äû29 Opponents pro Runner√óSeason‚Äú passen exakt dazu. ([MLB.com][2])
Auch die **Team-Namensnormalisierung** ist korrekt: *Cleveland Indians ‚Üí Guardians* ab 2022; die A‚Äôs treten **2025** w√§hrend der Sacramento-Phase schlicht als ‚ÄûAthletics‚Äú auf. ([MLB.com][3])

# Annahmen / Methods (f√ºrs Paper, zu Script 05)

* **Daten & Scope.** Play-by-play CSVs (Regular Season) aus `mlb_stats_YYYY/`. Postseason ist nicht enthalten.
* **Team & Gegner je Spiel.** Pro Event: `half_inning = top ‚Üí Runner-Team = Away`, `half_inning = bottom ‚Üí Runner-Team = Home`; **Opponent** ist das jeweils andere Team. ([MLB.com][1])
* **Exposure-Einheiten.**

  * **Prim√§rgewicht:** `onbase_count` = Zahl der Events, in denen der Runner auf Base ist (aus PBP), **pro Opponent-Team**.
  * **Fallback:** `game_count` = Zahl einzigartiger `game_id` pro Opponent.
  * **Normierung:** `weight_onbase = onbase_count / Œ£_onbase`, `weight_games = game_count / Œ£_games`, `weight = weight_onbase` (sonst `weight_games`). **Gewichte summieren je Runner√óSeason zu 1.** 
* **Doubleheader/Resumed Games.** Jedes `game_id`/`gamePk` z√§hlt separat. (MLB behandelt Top/Bottom strikt nach Home/Away.) ([MLB.com][1])
* **Team-Mapping.** Gegnernamen werden auf **MLB Team-IDs** gemappt (inkl. Historik: *Cleveland Indians/Guardians*, *Oakland/Athletics 2025*), damit Cross-Year-Joins mit Teammetriken robust sind.  ([MLB.com][3])
* **Balanced-Schedule-Kontext.** Ab 2023 ist die theoretische Obergrenze **29** Opponents/Season (eigene Franchise ausgeschlossen). ([MLB.com][2])

**Hinweis zur Nutzung:** Diese Schedule-Gewichte sind daf√ºr gedacht, gegnerische **Team-Metriken der Saison** (z. B. `team_poptime`, `team_tempo`) zu mitteln:
[
\text{opponent_avg_metric}*{r,s}=\sum_o \text{weight}*{r,s,o}\cdot \text{TeamMetric}_{o,s}.
]
Attempt-Level steht nicht zur Verf√ºgung; das ist bewusst eine **Exposure-Approximation** auf Season-Basis. 

[1]: https://www.mlb.com/glossary/rules/regulation-game?utm_source=chatgpt.com "Regulation Game | Glossary"
[2]: https://www.mlb.com/news/how-2023-mlb-balanced-schedule-could-affect-playoff-races?utm_source=chatgpt.com "How 2023 balanced schedule could affect playoff races"
[3]: https://www.mlb.com/press-release/release-indians-become-cleveland-guardians?utm_source=chatgpt.com "Release: Indians become Cleveland Guardians"


Medical References:
1. None ‚Äî DOI: file_0000000061fc620aac0f50929231e154

claude.ai

## Methodische Annahmen: Schedule Weights (Script 05)

### Berechnetes Konstrukt
**Runner-Season-Opponent Exposure Weights** (2018‚Äì2025): F√ºr jede Kombination Runner √ó Season √ó Opponent-Team wird berechnet, wie stark dieser Runner diesem Gegner ausgesetzt war. Gewichte summieren pro Runner-Season zu 1.0 und dienen der sp√§teren schedule-gewichteten Mittelung von Opponent-Metriken (Pop Time, Tempo).

---

### Methodische Entscheidungen

**1. Team-Zuordnung via `half_inning` (regelbasiert)**
- **Annahme**: In jedem Play-by-Play-Event zeigt `half_inning` eindeutig, welches Team am Schlag ist.
  - `top` ‚Üí Away-Team schl√§gt ‚Üí Runner geh√∂ren zum Away-Team
  - `bottom` ‚Üí Home-Team schl√§gt ‚Üí Runner geh√∂ren zum Home-Team
- **Opponent-Ableitung**: Jeweils das andere Team (Top ‚Üí Opponent=Home; Bottom ‚Üí Opponent=Away)
- **Robustheit bei Trades**: Da Team-Zuordnung **pro Event** erfolgt, werden Mid-Season-Trades automatisch korrekt erfasst (Runner wechselt Team ‚Üí `half_inning` spiegelt neues Team ab Trade-Datum)

**2. Gewichtung: On-Base-Events priorisiert**
- **Primary Weight**: Anzahl On-Base-Ereignisse des Runners gegen Gegner (`start_base` ‚àà {1B, 2B, 3B})
- **Begr√ºndung**: On-Base-Situationen sind die **direkte Exposure** f√ºr Baserunning-Entscheidungen (Steals, Leads). Ein Runner mit 50 On-Base-Events gegen Team X hat mehr relevante Exposure als einer mit 10 Events, selbst bei gleicher Spielanzahl.
- **Fallback**: Game-Counts (unique `game_id` pro Runner-Opponent), falls keine On-Base-Events vorliegen.

**3. Normalisierung zu Anteilen**
- **Formel**: 
  ```
  weight_{r,s,o} = onbase_count_{r,s,o} / Œ£_o onbase_count_{r,s,o}
  ```
  wobei r=Runner, s=Season, o=Opponent
- **Constraint**: Œ£_o weight_{r,s,o} = 1.0 (Quality-Check im Script)
- **Interpretation**: Ein Weight von 0.15 bedeutet: "15% der On-Base-Situationen dieses Runners in dieser Season waren gegen diesen Opponent"

**4. Team-ID-Normalisierung (historische Namen)**
- **Problem**: MLB-Stats PBP nutzt **volle Team-Namen** ("Cleveland Indians"), Savant-Leaderboards nutzen teils **Abk√ºrzungen** ("CLE") oder wechseln Namen √ºber Zeit
- **L√∂sung**: Hardcoded MLB Team-ID-Mapping mit **allen historischen Varianten**:
  - Cleveland Indians (2018‚Äì2021) ‚Üí 114
  - Cleveland Guardians (2022+) ‚Üí 114
  - Oakland Athletics (2018‚Äì2024) ‚Üí 133
  - Athletics (2025, ohne Stadt) ‚Üí 133
- **Begr√ºndung**: Konsistente Cross-Year-Joins auf Team-Metriken erfordern stabile IDs, unabh√§ngig von Name-Changes

**5. Deduplication: Ein Game z√§hlt einmal**
- **Annahme**: Pro Runner √ó Opponent √ó Game wird nur **ein** Game-Count gez√§hlt (via `nunique(game_id)`), unabh√§ngig von der Anzahl Events in diesem Spiel
- **On-Base-Events**: Werden **nicht** dedupliziert (mehrere On-Base-Situationen in einem Game = mehr Exposure)
- **Doubleheader**: Jedes `game_id` ist unique ‚Üí Doubleheader z√§hlen als zwei separate Games (MLB-Standard)

---

### Datenquellen-Annahmen

**MLB-Stats Play-by-Play**:
- **Granularit√§t**: Event-Level (jeder Pitch/Event = eine Zeile)
- **Runner-Identifikation**: `runner_id` + `start_base` markieren On-Base-Events
- **Team-Info**: `home_team`, `away_team` (volle Namen), `half_inning` (top/bottom)

**Baseball Rules (Team-Zuordnung)**:
- Top-H√§lfte = Visiting (Away) Team schl√§gt ([Wikipedia: Baseball Rules](https://en.wikipedia.org/wiki/Baseball_rules))
- Bottom-H√§lfte = Home Team schl√§gt

---

### Qualit√§tschecks (im Script)

1. **Weight-Sum-Check**: Œ£ weights pro Runner-Season = 1.0 (¬±0.001)
2. **Team-Mapping-Success**: 100% aller Opponent-Namen zu IDs aufgel√∂st
3. **Plausibilit√§ts-Check**: 
   - Avg. 6.1 On-Base-Events pro Opponent (plausibel bei ~19 Division-Games, ~6-7 Non-Division)
   - Avg. 2.6 Games pro Opponent
4. **30 Teams**: Unique `opponent_team_id` = 30 (korrekt trotz 32 Namen wegen historischer Dubletten)

---

### Verwendung in weiterer Analyse

**Schedule-gewichtete Opponent-Metriken** (Runner-Panel):
```
opponent_avg_poptime_{r,s} = Œ£_o weight_{r,s,o} √ó team_poptime_{o,s}
opponent_avg_tempo_{r,s}    = Œ£_o weight_{r,s,o} √ó team_tempo_{o,s}
```

**Interpretation**: Ein Runner, der prim√§r gegen Teams mit langsamen Catchern spielt (hohes team_poptime), erh√§lt h√∂heren `opponent_avg_poptime` ‚Üí kontrolliert f√ºr **Quality of Opposition** in sp√§teren DiD/Regression-Modellen.

---

### Limitations

**Keine PA-Level-Gewichte**: Idealer w√§re Gewichtung nach **Plate Appearances mit Runner on Base** (nicht nur Games oder On-Base-Events), aber diese Granularit√§t liegt nicht vor. On-Base-Events sind beste verf√ºgbare Proxy.

**Team-Aggregation**: Gegner-Metriken auf **Team-Season-Ebene**, nicht pitcher-/catcher-spezifisch. Ein Runner k√∂nnte systematisch gegen bestimmte Catcher innerhalb eines Teams spielen ‚Üí nicht erfasst, aber bei Schedule-Level-Analyse vertretbar.


############## 06 06 06 06###########################################

claude.ai

## Methodische Annahmen: Runner Panel Construction (Script 06)

### Berechnetes Konstrukt
**Analysis Runner Panel** (2018‚Äì2025): Individuelle Runner-Season-Level-Daten, die Runner-eigene Metriken (SB, CS, Speed, Lead Distance) mit **schedule-gewichteten Opponent-Metriken** (Pop Time, Tempo) kombinieren. Eine Beobachtung = Runner √ó Season.

---

### Datenintegration & Merge-Logik

**1. Prim√§re Datenquellen (Savant Leaderboards)**
- **Custom Stats** ‚Üí SB, CS counts (Basis f√ºr Attempts)
- **Baserunning Run Value** ‚Üí brv_total, brv_xb, brv_steal
- **Basestealing/Running Game** ‚Üí r_primary_lead, r_secondary_lead, player_name
- **Sprint Speed** ‚Üí sprint_speed_fps, team_id, team_name, age

**2. Merge-Hierarchie (Left Joins)**
- **Base**: Custom Stats (5,216 rows) ‚Äì enth√§lt alle Runner mit mindestens einem baserunning event
- **Left-merge**: BRV, Stealing, Speed
- **Begr√ºndung**: Custom Stats ist vollst√§ndigste Quelle f√ºr SB/CS; andere k√∂nnen fehlen (z.B. kein Sprint Speed bei Catchern)

**3. Missing Data nach Merge**
- **Sprint Speed: 9.2% missing** ‚Äì Normal (Catcher/Pitchers ohne qualifizierende Runs)
- **Opponent Metrics: 1.7% missing** ‚Äì Runner ohne ausreichende On-Base-Events in Schedule Weights (wahrscheinlich sehr geringe PA)

---

### Opponent-Metriken: Schedule-gewichtete Aggregation

**Formel:**
```
opponent_avg_poptime_{r,s} = Œ£_o [weight_{r,s,o} √ó team_poptime_{o,s}]
opponent_avg_tempo_{r,s}    = Œ£_o [weight_{r,s,o} √ó team_tempo_{o,s}]
```

**Wo:**
- r = runner_id, s = season, o = opponent_team_id
- `weight_{r,s,o}` = on-base-gewichtete Exposure (aus Script 05)
- `team_poptime/tempo` = Team-Season-Aggregate (aus Scripts 03/04)

**Annahmen:**
1. **Opponent-Qualit√§t konstant √ºber Season**: Team-Pop-Time/Tempo sind season-wide Aggregate, nicht intra-season-dynamisch (z.B. nach Catcher-Trades)
2. **Exposure = On-Base-Events**: Runner mit mehr On-Base-Events gegen Team X erh√§lt h√∂heres Gewicht f√ºr Team X's Metriken
3. **Team-Level ausreichend**: Pitcher-/Catcher-spezifische Matchups nicht erfasst (Runner k√∂nnte systematisch gegen bestimmte Catcher innerhalb eines Teams spielen)

**Interpretation:**
- `opponent_avg_poptime = 2.05 sec` bedeutet: "Gewichteter Durchschnitt der Pop Times aller Teams, gegen die dieser Runner 2023 spielte, basierend auf On-Base-Exposure"
- Kontrolliert f√ºr **Quality of Opposition** in sp√§teren Regressionen

---

### Berechnete/Abgeleitete Variablen

**1. Success Rate (Post-Processing)**
- **Problem**: `r_stolen_base_pct` in Custom Stats war NaN/fehlend
- **L√∂sung (Script 06b)**: Selbst berechnet als `success_rate = sb / attempts` (wo attempts > 0, sonst 0.0)
- **Begr√ºndung**: Fundamental f√ºr Steal-Analysen; Definition ist eindeutig und standardisiert
- **Validierung**: Mean 0.49 (49%) plausibel f√ºr MLB-wide Success Rate

**2. Attempts**
```python
attempts = sb + cs
```
- Summe aus successful steals und caught stealing
- **Keine Pickoffs**: `r_total_pickoff` nicht in attempts, da kein attempt stattfand

**3. CS (Caught Stealing)**
```python
cs = r_caught_stealing_2b + r_caught_stealing_3b + r_caught_stealing_home
```
- Aggregiert √ºber alle Bases
- Home-Steals sehr selten (typisch <1% aller CS)

**4. Treatment-Variable: post_2023**
```python
post_2023 = 1 if season >= 2023 else 0
```
- **2023 Rule Changes**: Pitch Clock (15/20s), gr√∂√üere Bases (+4.5 inches), Shift-Limits
- Binary indicator f√ºr DiD/Event-Study-Spezifikationen

**5. Multi-Team Flag**
```python
multi_team = 1 if runner appears with >1 team_id in same season
```
- **Limitation**: Vereinfachte Logik basierend auf Sprint-Speed-Daten (welche nur finales Team zeigen)
- **Robustere Alternative w√ºrde brauchen**: Trade-Daten mit exakten Daten (nicht in Leaderboards)
- **Aktuell**: Flag ist konservativ (untersch√§tzt Trades leicht)

---

### Player Names (Identifikation)

**Hierarchie:**
1. **Prim√§r**: `player_name` aus Basestealing/Running Game (wenn verf√ºgbar)
2. **Fallback**: Konstruiert aus `first_name + last_name` in Custom Stats (falls vorhanden)
3. **Wenn fehlt**: Bleibt NULL

**Begr√ºndung**: Verschiedene Leaderboards haben unterschiedliche Name-Formate; flexibles Handling vermeidet unn√∂tigen Datenverlust.

---

### Qualit√§tschecks & Validierung

**1. Plausibilit√§ts-Ranges (im Script):**
- **Pop Time**: 1.85‚Äì2.09 sec ‚úì (innerhalb 1.8‚Äì2.2 sec Erwartung)
- **Tempo**: 13.96‚Äì19.68 sec ‚úì (13‚Äì30 sec akzeptabel f√ºr Pre/Post-Clock)
- **Sprint Speed**: 20.8‚Äì30.7 ft/sec ‚úì (typisch f√ºr MLB-Spieler)
- **Success Rate**: 0‚Äì100% ‚úì (Mean 49% = MLB-typisch)

**2. Missing Data Thresholds:**
- <10% missing = akzeptabel f√ºr Hauptvariablen
- Sprint Speed 9.2% missing = OK (Positions-bedingt)
- Opponent Metrics 1.7% missing = sehr gut

**3. Merge-Erfolg:**
- 5,216 Zeilen nach allen Merges = 100% Retention der Custom-Stats-Basis
- Alle Left-Joins erfolgreich

---

### Methodische Limitationen

**1. Opponent-Metriken nicht attempt-spezifisch**
- Runner-Season-Opponent-Exposure basiert auf **On-Base-Events**, nicht auf **Steal-Attempts**
- Wenn Runner systematisch gegen schwache Catcher stehlen (opportunistic stealing), k√∂nnte Quality-of-Opposition untersch√§tzt sein
- **Mitigation**: On-Base-Events sind beste verf√ºgbare Proxy f√ºr Steal-Opportunities

**2. Team-Level-Aggregation**
- Team-Pop-Time/Tempo sind Durchschnitte √ºber alle Catcher/Pitcher eines Teams
- Intra-Team-Matchups (z.B. Runner meidet Catcher X) nicht erfasst
- **Begr√ºndung**: Attempt-Level-Daten mit Catcher/Pitcher-IDs w√§ren ideal, aber nicht in Leaderboards verf√ºgbar

**3. Trade-Timing**
- `multi_team` Flag vereinfacht; Mid-Season-Splits nicht exakt
- Team-Metriken (team_id, team_name) = finales Team der Season (aus Sprint Speed)
- **Implikation**: Bei Analysen nach Team filtern ‚Üí ggf. Multi-Team ausschlie√üen

**4. Missing Names**
- Player-Namen nicht f√ºr alle verf√ºgbar (verschiedene Leaderboard-Formate)
- **runner_id** (player_id) ist prim√§rer Key, Namen nur f√ºr Reporting

---

### Verwendung in Analysen

**Panel-Struktur:**
- **Unit**: Runner √ó Season
- **Time**: 2018‚Äì2025 (8 Jahre)
- **N**: 5,216 observations, 1,548 unique runners

**Typische Spezifikationen:**

**DiD (2023 Rule Change):**
```
SB_rate_{i,t} = Œ≤‚ÇÄ + Œ≤‚ÇÅ¬∑post2023_t + Œ≤‚ÇÇ¬∑X_{i,t} + Œ±_i + Œ≥_t + Œµ_{i,t}
```
- X = opponent_avg_poptime, opponent_avg_tempo, sprint_speed_fps

**Mechanismen:**
```
Lead_Distance ‚Üí Attempt ‚Üí Success ‚Üí Run_Value
(kontrolliert f√ºr opponent_avg_tempo, opponent_avg_poptime)
```

**Fixed Effects:**
- Runner FE (Œ±_i): time-invariant ability
- Season FE (Œ≥_t): ligaweite Trends (inkl. 2023 shock)

---

### Reproduzierbarkeit

**Alle Transformationen dokumentiert:**
- Success Rate = sb / attempts (Script 06b)
- CS = Œ£ caught_stealing_2b/3b/home
- Opponent-Metriken = weighted average via Schedule Weights (Script 05)
- Treatment = season ‚â• 2023

**Dependencies:**
- team_poptime_2018_2025.csv (Script 03)
- team_tempo_2018_2025.csv (Script 04)
- runner_schedule_weights_2018_2025.csv (Script 05)



chatgpt


Ja ‚Äî hier sind die **Annahmen/Methoden**, unter denen wir **das Runner-Panel (analysis_runner_panel.csv)** gebaut haben. Das ist genau der Text, den du ins Paper √ºbernehmen kannst:

# Annahmen (Runner-Panel 2018‚Äì2025)

* **Ebenen & Scope:** Wir arbeiten auf **Season-Level** pro Spieler (Runner√óSeason). Keine Attempt-, Spiel- oder Inning-Ebene; Mechanismen (Pop Time, Tempo, Sprint-Speed, Leads) liegen bei Savant/MLB nur als Saisonwerte vor und werden auch so verwendet. ([MLB.com][1])

* **Stolen-Base-Outcome & Erfolgsquote:**
  `attempts = SB + CS` (Season-Totals), `success_rate = SB / attempts` (und `0`, falls `attempts = 0`). **SB** und **CS** sind nach MLB-Glossar definiert. ([MLB.com][2])

* **Baserunning Run Value (BRV):** Wir verwenden Savant‚Äôs **Baserunning Runs** als Season-Kennzahl und pr√ºfen die Additivit√§t: `brv_total ‚âà brv_xb + brv_steal` (nur Rundungstoleranz). (Savant definiert BRV als Summe u. a. aus **Stealing** und **Extra Bases Taken**.) ([baseballsavant.com][3])

* **Sprint Speed:** `sprint_speed_fps` = **feet per second in der schnellsten 1-Sekunden-Phase**, Season-Mittel nach Savant-Definition. ([MLB.com][4])

* **Pop Time (Gegner):** **Team-Pop-Time (2B)** wird aus Catcher-W√ºrfen **attempts-gewichtet** (w√ºrfe/‚ÄûAtt.‚Äú als Gewichte) und pro **Team√óSeason** gemittelt; Pop Time = **Zeit vom Catcher-Mitt bis zur projizierten Ankunft am Base-Zentrum**. F√ºr Runner bilden wir daraus einen **gegnergewichteteten Durchschnitt** (`opponent_avg_poptime`). ([MLB.com][1])

* **Pitch Tempo (Gegner):** Wir nutzen **Pitch Tempo ‚Äì Runners On** (Savant-Definition: **Median release-to-release**) und aggregieren auf **Team√óSeason** **pitches-gewichtet**; f√ºr Runner wird daraus der **gegnergewichtete** Wert `opponent_avg_tempo`. **Wichtig:** Pitch Tempo ‚â† Pitch-Timer-Uhr. ([MLB.com][5])

* **Schedule-Gewichte (Exposure):** F√ºr jede Runner√óSeason bestimmen wir pro Gegner-Team **Gewichte**, prim√§r √ºber **On-Base-Ereignisse** aus dem PBP; Fallback: **Game-Counts**. Die Gewichte werden **auf 1 normiert** und dienen zum Mitteln der Gegner-Teammetriken. Die Team-Zuordnung pro Spiel erfolgt regelkonform √ºber die **Halbinningslogik** (*Top* = Ausw√§rts schl√§gt ‚Üí Runner-Team = Away; *Bottom* = Heim schl√§gt ‚Üí Runner-Team = Home; Opponent ist jeweils das andere Team). ([Wikipedia][6])

* **Balanced Schedule ab 2023:** Plausibilit√§tsanker f√ºr die Gegnerabdeckung: **jedes Team spielt gegen alle 29 Gegner** (daher k√∂nnen Runner bis zu 29 Opponenten in einer Season haben). ([MLB.com][7])

* **Regelkontext (Pitch-Timer):** Ligaweite Niveaus des Tempos verschieben sich 2023/24 (Timer **2023**: 20 s mit Runnern; **2024**: 18 s). Die **Definition** von Pitch Tempo bleibt davon unber√ºhrt; in Modellen empfehlen wir **Year Fixed Effects** bzw. eine saisonrelative Normierung. ([MLB.com][8])

* **Keys & Harmonisierung:** Joins √ºber (`season`, `player_id`). Teamnamen werden (wo n√∂tig) auf **MLB-Team-IDs** normalisiert, damit Cross-Year-Joins robust sind (z. B. *Cleveland Indians ‚Üí Guardians* ab 2022; Franchise-Umbenennungen/Umz√ºge beachten). ([MLB.com][7])

* **QA-Checks (integriert):**
  (i) `attempts = SB + CS`, (ii) `success_rate = SB/attempts`, (iii) `brv_total ‚âà brv_xb + brv_steal` (Toleranz), (iv) keine Duplikate je (`runner_id`, `season`), (v) Werte in erwarteten Korridoren: Pop Time ~**1,9‚Äì2,1 s**; Tempo (Runners On) typ. **~13‚Äì20 s** und **niedriger** nach 2023. ([MLB.com][1])

Wenn du magst, fasse ich dir das als kurzen ‚Äû**Methods ‚Äî Runner Panel**‚Äú-Kasten (Markdown/LaTeX) zusammen ‚Äì inhaltlich ist das hier bereits **paper-ready**.

[1]: https://www.mlb.com/glossary/statcast/pop-time?utm_source=chatgpt.com "Pop Time (POP) | Glossary"
[2]: https://www.mlb.com/glossary/standard-stats/stolen-base?utm_source=chatgpt.com "Stolen Base (SB) | Glossary"
[3]: https://baseballsavant.mlb.com/leaderboard/poptime?utm_source=chatgpt.com "Statcast Catcher Pop Time Leaderboard | baseballsavant.com"
[4]: https://www.mlb.com/glossary/statcast/sprint-speed?utm_source=chatgpt.com "Sprint Speed (SS) | Glossary"
[5]: https://www.mlb.com/glossary/statcast/pitch-tempo?utm_source=chatgpt.com "Pitch Tempo | Glossary"
[6]: https://en.wikipedia.org/wiki/Inning?utm_source=chatgpt.com "Inning"
[7]: https://www.mlb.com/news/2023-mlb-schedule?utm_source=chatgpt.com "2023 MLB schedule"
[8]: https://www.mlb.com/glossary/rules/pitch-timer?utm_source=chatgpt.com "Pitch Timer (2023 rule change) | Glossary"



Pitch Tempo (Statcast/Baseball Savant). Pitch Tempo misst die Medianzeit zwischen Pitch-Releases (Release-zu-Release). In die Berechnung gehen nur Pitches ein, die auf einen Take folgen und an denselben Batter geworfen werden. Savant labelt Pitches < 15 s als ‚ÄûFast‚Äú und > 30 s als ‚ÄûSlow‚Äú; die Metrik wird w√∂chentlich aktualisiert. Pitch Tempo ist nicht identisch mit dem MLB-Pitch-Timer (der startet beim Catcher-Return und endet mit Beginn der Lieferung; 2023: 15/20 s, seit 2024 mit Runnern 18 s). In unseren Teamaggregaten mitteln wir das Runners-On-Tempo pitches-gewichtet.

Ja‚Äîgenau so ist‚Äôs offiziell definiert, und wir verwenden **genau diese Definition** in unseren Methods:

* **Pitch tempo (Savant):** Median **Release‚ÜíRelease**; nur Pitches, die auf einen **Take** (Called Ball/Strike) folgen und **an denselben Batter** gehen; w√∂chentlich aktualisiert; ‚ÄúFast‚Äù < 15 s, ‚ÄúSlow‚Äù > 30 s. Das ist **nicht** der Pitch-Timer. ([baseballsavant.com][1])
* **Pitch-Timer (Regel):** 2023 eingef√ºhrt (**20 s** mit Runnern, 15 s bases empty); ab **2024** mit Runnern **18 s**. Wir behandeln Timer-bedingte Niveauverschiebungen mit **Year fixed effects** bzw. saisonrelativen Gr√∂√üen. ([MLB.com][2])

Damit passt eure Team-Tempo-Aggregation (pitches-gewichtet, **Runners On**) exakt zur Savant-Metrik‚Äîkein √Ñnderungsbedarf.

[1]: https://baseballsavant.mlb.com/leaderboard/pitch-tempo?utm_source=chatgpt.com "Statcast Pitch Tempo | baseballsavant.com - MLB.com"
[2]: https://www.mlb.com/rule-changes-2023?utm_source=chatgpt.com "2023 MLB Rule Changes"


############ 07 07 07 07 07 #########################
############ 07 07 07 07 07 #########################
############ 07 07 07 07 07 #########################
############ 07 07 07 07 07 #########################

chatgpt

Klar‚Äîhier sind die **Annahmen/Methoden zu Script 07 (`07_compute_league_context.py`)** in kurz & paper-ready, inkl. der n√∂tigen Quellen.

# Annahmen (Script 07 ‚Äì League Context 2018‚Äì2025)

**Ziel & Einheit.**
Wir bauen pro **Saison** eine Liga-Baseline f√ºr zwei Mechanik-Metriken, um Teams/Spieler sp√§ter **saisonrelativ** einzuordnen:

* `league_mean_pop2b` (Catcher **Pop Time** zu 2B),
* `league_mean_tempo_onbase` (Pitch **Tempo** mit Runnern auf Base),
  plus `n_teams`.

**Definitionen (Quelle Baseball Savant / MLB-Glossar).**

* **Pitch Tempo** misst die **Medianzeit zwischen zwei Pitches (Release‚ÜíRelease)**; gez√§hlt werden nur Pitches, die auf einen **Take** (Called Ball/Strike) folgen und **an denselben Batter** geworfen werden. **W√∂chentliche** Aktualisierung; **nicht** identisch mit der Pitch-Clock. ([baseballsavant.com][1])
* **Pop Time** misst die Zeit vom **Catch im Mitt** bis zum **projizierten Empfang am Basismittelpunkt**; kombiniert Exchange & Arm Strength. ([baseballsavant.com][2])

**Gewichtete Ligamittel (Begr√ºndung: Mess-Einheit).**

* F√ºr **Pop Time** mitteln wir √ºber alle Teams einer Saison **attempts-gewichtet** (W√ºrfe/‚ÄûAtt.‚Äú zu 2B als Gewichte), weil Pop Time **wurfbasiert** gemessen wird. ([baseballsavant.com][2])
* F√ºr **Pitch Tempo (Runners On)** mitteln wir **pitches-gewichtet** √ºber alle Teams (Anzahl Pitches mit Runnern als Gewichte), weil Tempo **pitchbasiert** definiert ist. ([baseballsavant.com][1])

**Scope & Filter.**

* **Regular Season** 2018‚Äì2025; je Jahr erwarten wir **30 Teams** (`n_teams=30`).
* Falls vorhanden, schlie√üen wir Zeilen mit **Low-Reliability-Flags** aus (z. B. extrem wenige Versuche/Pitches), damit die Liga-Mittel nicht durch Kleinststichproben verzerrt werden.
* Keine Monatswerte; beide Mechaniken werden von Savant **saisonal** bereitgestellt (Tempo zudem *rolling/weekly* aktualisiert). ([baseballsavant.com][1])

**Regelkontext (Interpretation, keine Umrechnung).**

* Die **Pitch-Clock** ist **nicht** dasselbe wie Pitch Tempo; sie setzt aber das **Liga-Niveau** ab 2023/2024 herunter (2023: 15 s bases empty / **20 s** mit Runnern; **2024: 18 s** mit Runnern). Unsere Liga-Baselines spiegeln diese Umfeldverschiebung wider, ohne die Definition von Tempo zu √§ndern. ([MLB.com][3])

**Verwendung.**

* Die resultierende `league_context_2018_2025.csv` dient als **Helper** f√ºr `team ‚àí league`-Abweichungen und **Year Fixed Effects** in den Modellen (saisonrelative Interpretation von Team- und Runner-Metriken).

> Kurz gesagt: Script 07 bildet **attempts- bzw. pitches-gewichtete** Ligamittel, konsistent mit den **wurf-/pitchbasierten** Definitionen von Pop Time und Pitch Tempo. Der **Pitch-Timer** wird als **Kontext** ber√ºcksichtigt (Niveauverschiebung), **nicht** als Messgr√∂√üe selbst. ([baseballsavant.com][2])

[1]: https://baseballsavant.mlb.com/leaderboard/pitch-tempo?utm_source=chatgpt.com "Statcast Pitch Tempo | baseballsavant.com - MLB.com"
[2]: https://baseballsavant.mlb.com/leaderboard/poptime?utm_source=chatgpt.com "Statcast Catcher Pop Time Leaderboard | baseballsavant.com"
[3]: https://www.mlb.com/news/mlb-2023-rule-changes-pitch-timer-larger-bases-shifts?utm_source=chatgpt.com "MLB 2023 rule changes: pitch timer, larger bases, shifts"


claude 

## Methodische Annahmen: League Context (Script 07)

### Berechnetes Konstrukt
**League-Wide Baselines** (2018‚Äì2025): Gewichtete Mittelwerte und Standardabweichungen f√ºr Pop Time und Pitch Tempo auf Liga-Ebene pro Season. Dient als Referenz f√ºr saisonrelative Standardisierung (z-Scores, Perzentile, Team-League-Differenzen).

---

### Methodische Entscheidungen

**1. Gewichtung: Attempts/Pitches-weighted**
- **Pop Time**: Gewichtet mit `total_attempts_2b` pro Team
- **Tempo**: Gewichtet mit `total_pitches` pro Team
- **Begr√ºndung**: Teams mit mehr Messungen liefern zuverl√§ssigere Sch√§tzungen; verhindert Verzerrung durch Small-Sample-Teams

**2. Reliability-Filter**
- **Nur reliable Teams** (low_reliability=0) f√ºr Liga-Mittelwerte
- **Fallback**: Falls keine reliable Teams ‚Üí alle Teams nutzen
- **Begr√ºndung**: <10 Attempts (Pop) oder <1000 Pitches (Tempo) sind unreliable estimates; sollen Liga-Baseline nicht verzerren

**3. Weighted Standard Deviation**
```python
weighted_variance = Œ£ w_i √ó (x_i - xÃÑ)¬≤ / Œ£ w_i
weighted_std = ‚àöweighted_variance
```
- Misst **Between-Team-Varianz** innerhalb einer Season
- Gewichtet analog zu Mittelwert
- **Verwendung**: F√ºr z-Score-Standardisierung oder Dispersion-Trends

**4. Season als Unit**
- Eine Beobachtung = Liga-Aggregat pro Season
- Keine Sub-Season-Dynamik (z.B. Pre/Post-All-Star-Break)
- **Begr√ºndung**: Regel√§nderungen (Pitch Clock, gr√∂√üere Bases) gelten season-wide; intra-season-shifts nicht relevant f√ºr Treatment-Identifikation

---

### Interpretation der Metriken

**League Mean Pop Time (league_mean_pop2b):**
- Durchschnittliche Pop Time to 2B √ºber alle Teams, gewichtet mit Steal-Attempts
- **2018**: 2.01 sec ‚Üí **2025**: 1.96 sec (kontinuierlicher R√ºckgang)
- **2023-Drop**: -0.02 sec ‚Üí konsistent mit gr√∂√üeren Bases (-4.5 inches = -2% Distanz)

**League Mean Tempo (league_mean_tempo_onbase):**
- Durchschnittliche Release-to-Release-Zeit mit Runnern on Base
- **Pre-2023**: 17.8 sec (relativ stabil, leichter Anstieg)
- **Post-2023**: 15.4 sec (2.4 sec Drop = 13.5% Reduktion)
- **Pitch Clock Effekt dokumentiert**: Timer 20s (2023), 18s (2024+), aber Tempo ‚â† Timer (siehe unten)

**League Std (Pop/Tempo):**
- **Pop Time Std**: ~0.03-0.04 sec ‚Üí geringe Between-Team-Varianz (Catchers relativ homogen)
- **Tempo Std**: Pre-2023 ~0.7 sec, Post-2023 ~0.5 sec ‚Üí **Clock homogenisiert Liga** (weniger Team-Varianz)

---

### Tempo vs. Timer: Kritische Unterscheidung

**Savant Pitch Tempo (was wir messen):**
- **Start**: Pitch N release
- **Ende**: Pitch N+1 release
- **Inkludiert**: Catcher-Return (~4 sec), Pitcher-Prep, Signal-Reading
- **Exkludiert**: Pitches nach Non-Takes (Fouls, Swinging-Strikes), verschiedene Batter

**MLB Pitch Timer (Regelwerk):**
- **Start**: Pitcher erh√§lt Ball vom Catcher zur√ºck
- **Ende**: Start of Delivery
- **20s (2023)** / **18s (2024+)** mit Runnern, 15s ohne Runner

**Differenz: ~6 Sekunden**
- 1.5s Delivery ‚Üí Release
- 0.5s Ball-Flight Catcher
- 4.0s Catcher-Return

**Implikation f√ºr Analyse:**
- **Tempo-Levels** nicht direkt vergleichbar mit Timer-Regel (Tempo ~15-18s ‚â† Timer 18-20s)
- **Tempo-Shifts** aber valide Proxy f√ºr Regeleffekt (2.4s Drop = reale Verhaltens√§nderung)
- In Modellen: **Year FE + saisonrelative Tempo-Metriken** trennen Regeleffekt von Trends

---

### Verwendung in Analysen

**Saisonrelative Standardisierung:**
```
team_pop_zscore_{t,s} = (team_pop_{t,s} - league_mean_pop_{s}) / league_std_pop_{s}
```

**DiD mit Detrending:**
```
Outcome ~ post2023 √ó Treatment + league_mean_tempo_s + Year_FE + ...
```
- `league_mean_tempo` als Kovariate kontrolliert f√ºr ligaweiten Trend
- Year FE f√§ngt diskrete Shifts (2023 Clock)

**Plausibilit√§ts-Checks:**
- Team-Pop-Time >2.5 Std von Liga-Mittel ‚Üí Daten-Check
- Tempo-Shift 2022‚Üí2023 sollte ~2-3 sec sein (beobachtet: 2.8 sec ‚úì)

---

### Qualit√§tschecks

1. **30 Teams konstant** √ºber alle Jahre
2. **Pop Time Range**: 1.95-2.01 sec (plausibel f√ºr MLB)
3. **Tempo Pitch-Clock-Effekt**: 13.5% Reduktion (konsistent mit Literature)
4. **Std-Reduktion Post-Clock**: Homogenisierung durch Regelzwang

---

############ 08 08 08 08 08 #########################
############ 08 08 08 08 08 #########################
############ 08 08 08 08 08 #########################
############ 08 08 08 08 08 #########################

claude.ai

## Methodische Annahmen: Monthly Trends (Script 08)

### Berechnetes Konstrukt
**Monthly Stolen Base Counts** (2018‚Äì2025): Anzahl SB/CS pro Runner √ó Season √ó Month, direkt aus Play-by-Play-Daten aggregiert. **Keine Mechanismen-Variablen** (kein Lead Distance, Pop Time, etc.).

---

### Methodische Entscheidungen

**1. Direkte Aggregation (keine Disaggregation)**
- **Input**: `game_date` aus MLB-Stats PBP (verf√ºgbar in allen Jahren)
- **Methode**: `month = MONTH(game_date)` ‚Üí `GROUP BY runner_id, season, month`
- **Keine Denton/Chow-Lin**: Nicht n√∂tig, da monatliche Granularit√§t bereits vorhanden
- **Begr√ºndung**: PBP-Daten haben exakte Datumsangaben; proportionale Disaggregation von Jahresdaten w√§re unn√∂tig und w√ºrde Fehler einf√ºhren

**2. Event-Definition**
- **SB**: `event IN ('stolen_base_2b', 'stolen_base_3b', 'stolen_base_home')`
- **CS**: `event IN ('caught_stealing_2b', 'caught_stealing_3b', 'caught_stealing_home')`
- **Exkludiert**: Pickoffs (nicht als Steal-Attempt klassifiziert)

**3. Keine Mechanismen**
- **Nur Counts**: `sb_count, cs_count, attempts, success_rate`
- **Kein**: Lead Distance, Pop Time, Tempo, Sprint Speed
- **Begr√ºndung**: Monthly-File dient zur **Zeitreihen-Visualisierung** und **saisonalen Muster-Detektion**, nicht f√ºr kausale Mechanismen

**4. Unit of Analysis**
- Eine Beobachtung = Runner √ó Season √ó Month (nur Monate mit ‚â•1 SB/CS Event)
- **Sparse Matrix**: Runner ohne Events in Monat X ‚Üí keine Zeile (nicht 0-gef√ºllt)
- **Begr√ºndung**: Reduziert Dateigr√∂√üe; f√ºr Analysen kann bei Bedarf 0-gef√ºllt werden

**5. Success Rate Berechnung**
```python
success_rate = sb_count / attempts  (if attempts > 0, else 0.0)
```
- Identisch zu Runner-Panel-Definition
- Monatliche Samples klein (oft 1-5 Attempts) ‚Üí hohe Varianz erwartet

---

### Interpretation & Verwendung

**Typische Anwendungen:**

1. **Saisonale Muster**: Steigen SB-Rates im warmen Wetter (April-Sept)?
2. **Regeleffekt-Timing**: Wann 2023 manifestierte sich Clock-Effekt? (Saison-Start vs. sp√§ter)
3. **Within-Season-Trends**: Lernen Pitcher/Catchers im Saisonverlauf?
4. **Injury/Fatigue**: SB-Success sinkt Ende Saison?

**Beispiel-Spezifikation:**
```
SB_count_{i,s,m} ~ Month_FE + Season_FE + Runner_FE + X_{i,s} + Œµ
```

**Nicht geeignet f√ºr:**
- Kausale Mechanismen (fehlen Lead/Pop/Tempo)
- Opponent-Kontrollen (keine schedule weights auf Monatsebene)
- Pr√§zise Within-Season-DiD (Sample-Sizes klein)

---

### Datenqualit√§t & Limitations

**1. MLB Season-Struktur**
- **Regul√§re Season**: M√§rz/April ‚Äì September/Oktober
- **Spring Training**: Februar/M√§rz (nicht in PBP-Daten)
- **Playoffs**: Oktober (in 2018-2025 PBP enthalten, aber ggf. separat analysieren)
- **Monatsverteilung**: April-Sept haben meiste Events; M√§rz/Okt weniger

**2. Small-Sample-Bias**
- Monatliche SB/CS counts oft <5 pro Runner
- Success Rate hochvariabel (0% bei 0/2, 100% bei 2/2)
- **Empfehlung**: F√ºr Inference auf Season-Level aggregieren oder Bayes-Shrinkage nutzen

**3. Trades**
- Runner wechselt Team mid-month ‚Üí Monat wird komplett dem finalen Team zugeschrieben (via PBP-Logik)
- F√ºr Team-spezifische monatliche Analysen ‚Üí zus√§tzliche Trade-Dates n√∂tig

**4. COVID-Saison 2020**
- Verk√ºrzte Season (60 Spiele, Juli-Sept)
- M√§rz-Juni = 0 Events
- In Zeitreihen-Plots: Gap oder extrapolieren

---

### Reproduzierbarkeit

**Exakte Definition jedes Feldes:**
- `sb_count` = Œ£ (event startswith 'stolen_base') f√ºr runner_id, season, month
- `cs_count` = Œ£ (event startswith 'caught_stealing')
- `attempts` = sb_count + cs_count
- `success_rate` = sb_count / attempts (oder 0 wenn attempts=0)

**Keine Transformationen**, keine Imputationen, keine Gewichte.

---

### Warum keine Denton-Disaggregation?

ChatGPT hatte urspr√ºnglich Denton vorgeschlagen f√ºr "temporal disaggregation". Das ist aber f√ºr folgenden Fall gedacht:

**Wann Denton sinnvoll:**
- High-Frequency-Indikator vorhanden (z.B. monatliche PA)
- Low-Frequency-Target (z.B. nur Jahresdaten f√ºr SB)
- ‚Üí Denton verteilt Jahres-SB proportional zu monatlichen PAs

**Warum hier nicht n√∂tig:**
- Wir **haben** bereits monatliche SB-Daten (via game_date)
- Direkte Aggregation ist exakt, Denton w√§re nur eine Approximation
- **Ockhams Razor**: Einfachste Methode (direkt z√§hlen) ist beste
